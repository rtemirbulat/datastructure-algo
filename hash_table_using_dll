// C++ implementation of Hashtable 
// using doubly linked list 
#include <bits/stdc++.h> 
using namespace std; 
const int tablesize = 25;  
struct hash_node { 
	int val, key; 
	hash_node* next; 
	hash_node* prev; 
}; 
class HashMap { 
public: hash_node **hashtable, **top; 
	HashMap() 
	{ 

		hashtable = new hash_node*[tablesize]; 
		top = new hash_node*[tablesize]; 
		for (int i = 0; i < tablesize; i++) { 
			hashtable[i] = NULL; 
			top[i] = NULL; 
		} 
	} 

	~HashMap() 
	{ 
		delete[] hashtable; 
	} 
	int HashFunc(int key) 
	{ 
		return key % tablesize; 
	} 
	void find(int key) 
	{ 
		int hash_val = HashFunc(key); 
		bool flag = false; 
		hash_node* entry = hashtable[hash_val]; 
		if (entry != NULL) { 
			while (entry != NULL) { 
				if (entry->key == key) { 
					flag = true; 
				} 
				if (flag) { 
					cout << "Element found at key "
						<< key << ": "; 
					cout << entry->val << endl; 
				} 
				entry = entry->next; 
			} 
		} 
		if (!flag) 
			cout << "No Element found at key "
				<< key << endl; 
	} 
	void remove(int key) 
	{ 
		int hash_val = HashFunc(key); 
		hash_node* entry = hashtable[hash_val]; 
		if (entry->key != key || entry == NULL) { 
			cout << "Couldn't find any element at this key "	<< key << endl; 
			return; 
		} 
		while (entry != NULL) { 
			if (entry->next == NULL) { 
				if (entry->prev == NULL) { 
					hashtable[hash_val] = NULL; 
					top[hash_val] = NULL; 
					delete entry; 
					break; 
				} 
				else { 
					top[hash_val] = entry->prev; 
					top[hash_val]->next = NULL; 
					delete entry; 
					entry = top[hash_val]; 
				} 
			} 
			entry = entry->next; 
		} 
		cout << "Element was successfully removed at the key "
			<< key << endl; 
	} 
  void add(int key, int value) 
	{ 

		int hash_val = HashFunc(key); 
		hash_node* entry = hashtable[hash_val]; 
		if (entry == NULL) { 
			entry = new hash_node; 
			entry->val = value; 
			entry->key = key; 
			entry->next = NULL; 
			entry->prev = NULL; 
			hashtable[hash_val] = entry; 
			top[hash_val] = entry; 
		} 

		else { 

			while (entry != NULL) 
				entry = entry->next; 

			entry = new hash_node; 
			entry->val = value; 
			entry->key = key; 
			entry->next = NULL; 
			entry->prev = top[hash_val]; 
			top[hash_val]->next = entry; 
			top[hash_val] = entry; 
		} 
		cout << "Value " << value << " was successfully"
				" added at key " << key << endl; 
	} 
}; 


int main() 
{ 
	HashMap hash; 
	hash.add(4, 5); 
	hash.find(4); 
	hash.remove(4); 
	return 0; 
} 
